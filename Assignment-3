Q1

#include <mpi.h> #include <stdio.h> #include <stdlib.h>
#define N (1 << 16) // Vector size: 2^16 #define A 2.5	// Scalar multiplier

void sequential_daxpy(double* x, double* y) { for (int i = 0; i < N; i++) {
x[i] = A * x[i] + y[i];
}
}

void parallel_daxpy(int rank, int size) { int chunk_size = N / size;
double *x, *y, *local_x, *local_y;

if (rank == 0) {
x = (double*) malloc(N * sizeof(double)); y = (double*) malloc(N * sizeof(double));

for (int i = 0; i < N; i++) { x[i] = i * 1.0;
y[i] = i * 0.5;
}
}

local_x = (double*) malloc(chunk_size * sizeof(double)); local_y = (double*) malloc(chunk_size * sizeof(double));

MPI_Scatter(x, chunk_size, MPI_DOUBLE, local_x, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);
MPI_Scatter(y, chunk_size, MPI_DOUBLE, local_y, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

for (int i = 0; i < chunk_size; i++) { local_x[i] = A * local_x[i] + local_y[i];
}

MPI_Gather(local_x, chunk_size, MPI_DOUBLE, x, chunk_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

if (rank == 0) { free(x);
free(y);
}
free(local_x); free(local_y);
}

int main(int argc, char* argv[]) { int rank, size;
double start, end, seq_time, mpi_time;
 
MPI_Init(&argc, &argv); MPI_Comm_rank(MPI_COMM_WORLD, &rank); MPI_Comm_size(MPI_COMM_WORLD, &size);

if (rank == 0) {
double* x = (double*) malloc(N * sizeof(double)); double* y = (double*) malloc(N * sizeof(double));

for (int i = 0; i < N; i++) { x[i] = i * 1.0;
y[i] = i * 0.5;
}
start = MPI_Wtime(); sequential_daxpy(x, y); end = MPI_Wtime(); seq_time = end - start;
printf("Sequential time: %f seconds\n", seq_time);

free(x);
free(y);
}

MPI_Barrier(MPI_COMM_WORLD); start = MPI_Wtime(); parallel_daxpy(rank, size);
end = MPI_Wtime(); mpi_time = end - start;

if (rank == 0) {
printf("Parallel time with %d processes: %f seconds\n", size, mpi_time); printf("Speedup: %f\n", seq_time / mpi_time);
}

MPI_Finalize(); return 0;
}


Q2

#include <mpi.h> #include <stdio.h>
#define NUM_STEPS 100000 // Number of iterations int main(int argc, char *argv[]) {
int rank, size, i;
long num_steps = NUM_STEPS;
double step, x, sum = 0.0, local_sum = 0.0, pi;

MPI_Init(&argc, &argv);	// Initialize MPI MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get rank of process MPI_Comm_size(MPI_COMM_WORLD, &size); // Get number of processes

// Step size remains the same for all processes
 
step = 1.0 / (double)num_steps;

// Broadcast num_steps to all processes from root (rank 0) MPI_Bcast(&num_steps, 1, MPI_LONG, 0, MPI_COMM_WORLD);

// Each process calculates its partial sum for (i = rank; i < num_steps; i += size) {
x = (i + 0.5) * step;
local_sum += 4.0 / (1.0 + x * x);
}
// Reduce all local sums into process 0
MPI_Reduce(&local_sum, &sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
// Process 0 calculates final π value if (rank == 0) {
pi = step * sum;
printf("Approximate π: %.15f\n", pi);
}

MPI_Finalize(); // Finalize MPI return 0;
}


Q3

#include <mpi.h> #include <stdio.h> #include <stdlib.h> #include <math.h>

#define MAX_NUM 100 // Change this value to set the upper limit

// Function to check if a number is prime int is_prime(int num) {
if (num < 2) return 0;
for (int i = 2; i <= sqrt(num); i++) { if (num % i == 0) return 0;
}
return 1;
}

int main(int argc, char* argv[]) {
int rank, size, num, max_val = MAX_NUM; MPI_Init(&argc, &argv); MPI_Comm_rank(MPI_COMM_WORLD, &rank); MPI_Comm_size(MPI_COMM_WORLD, &size);

if (rank == 0) { // Master process
int next_number = 2; // Start checking from 2
int active_workers = size - 1; // Number of active slave processes int received_number;

while (active_workers > 0) {
MPI_Recv(&received_number, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
 
if (received_number > 0) {
printf("%d ", received_number); // Print the prime number
}

if (next_number <= max_val) {
MPI_Send(&next_number, 1, MPI_INT, received_number, 0, MPI_COMM_WORLD); next_number++;
} else {
int stop_signal = -1;
MPI_Send(&stop_signal, 1, MPI_INT, received_number, 0, MPI_COMM_WORLD); active_workers--;
}
}
printf("\n");
} else { // Slave processes int number_to_test; while (1) {
MPI_Send(&rank, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
MPI_Recv(&number_to_test, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE); if (number_to_test < 0) break;
int result = is_prime(number_to_test) ? number_to_test : -number_to_test; MPI_Send(&result, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
}
}

MPI_Finalize(); return 0;
}
